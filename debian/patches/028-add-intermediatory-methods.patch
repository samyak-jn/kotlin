Description: Add intermediate methods in 
 This patch adds the following:
 1. intermediatory static method for enum class Ide, for the method Ide.IJ()
 2. intermediatory method for project.projectTest and also for project.generator
 3. Added intermideatory method for Project.androidDxJar
 4. introduced an intermediatory method for ModuleDependency.includeJars

---


--- a/buildSrc/src/main/kotlin/CommonUtil.kt
+++ b/buildSrc/src/main/kotlin/CommonUtil.kt
@@ -58,6 +58,8 @@
     workingDir = rootDir
 }
 
+fun customGenerator(project:Project,fqName: String, sourceSet: SourceSet? = null) = project.generator(fqName,sourceSet)
+
 fun Project.getBooleanProperty(name: String): Boolean? = this.findProperty(name)?.let {
     val v = it.toString()
     if (v.isBlank()) true
--- a/buildSrc/src/main/kotlin/IdeCompatibilityDsl.kt
+++ b/buildSrc/src/main/kotlin/IdeCompatibilityDsl.kt
@@ -65,6 +65,7 @@
         val AS: CompatibilityPredicate = IdeKindPredicate(Kind.AndroidStudio)
     }
 }
+fun IJ():Boolean{return Ide.IJ()}
 
 val Platform.orHigher get() = object : CompatibilityPredicate {
     override fun matches(ide: Ide) = ide.platform.version >= version
--- a/buildSrc/src/main/kotlin/artifacts.kt
+++ b/buildSrc/src/main/kotlin/artifacts.kt
@@ -35,6 +35,13 @@
     }
 }
 
+fun customTestsJar(project:Project,decider:String):Jar{
+	when(decider){
+		"compiler"->{return project.testsJar()}
+		else->{return project.testsJar()}
+	}
+}
+
 var Project.artifactsRemovedDiagnosticFlag: Boolean
     get() = extra.has("artifactsRemovedDiagnosticFlag") && extra["artifactsRemovedDiagnosticFlag"] == true
     set(value) {
--- a/buildSrc/src/main/kotlin/intellijDependencies.kt
+++ b/buildSrc/src/main/kotlin/intellijDependencies.kt
@@ -64,6 +64,8 @@
 
 fun Project.intellijCoreDep() = intellijDep("intellij-core")
 
+fun customIntellijCoreDep(project:Project) = project.intellijDep("intellij-core")
+
 fun Project.intellijPluginDep(plugin: String) = intellijDep(plugin)
 
 fun Project.intellijUltimateDep() = intellijDep("intellij")
@@ -90,6 +92,8 @@
     }
 }
 
+fun customIncludeJars(moduleDependency:ModuleDependency,names: List<String>, rootProject: Project? = null) {moduleDependency.includeJars(*names.toTypedArray(),rootProject = rootProject)}
+
 // Workaround. Top-level Kotlin function in a default package can't be called from a non-default package
 object IntellijRootUtils {
     fun getRepositoryRootDir(project: Project): File = with (project.rootProject) {
--- a/buildSrc/src/main/kotlin/tasks.kt
+++ b/buildSrc/src/main/kotlin/tasks.kt
@@ -18,6 +18,7 @@
 // usages in build scripts are not tracked properly
 @file:Suppress("unused")
 
+import java.io.File
 import org.gradle.api.Project
 import org.gradle.api.Task
 import org.gradle.api.internal.tasks.testing.filter.DefaultTestFilter
@@ -101,6 +102,26 @@
     body()
 }
 
+fun customProjectTest(project:Project,rootDir:File,antLauncherJar:String,taskName: String = "test",decider:String): Test{
+	when(decider){
+		"compiler"->{
+			return project.projectTest {
+				dependsOn(":dist")
+				workingDir = rootDir
+				systemProperty("kotlin.test.script.classpath", project.sourceSets.getByName("test").output.classesDirs.joinToString(File.pathSeparator))
+				systemProperty("kotlin.suppress.expected.test.failures", project.findProperty("kotlin.suppress.expected.test.failures") ?: false)
+				doFirst {
+					systemProperty("kotlin.ant.classpath", antLauncherJar)
+					systemProperty("kotlin.ant.launcher.class", "org.apache.tools.ant.Main")
+				}
+			}
+		}
+		else->{
+			return project.projectTest {}
+		}
+	}
+}
+
 private inline fun String.isFirstChar(f: (Char) -> Boolean) = isNotEmpty() && f(first())
 
 inline fun <reified T : Task> Project.getOrCreateTask(taskName: String, body: T.() -> Unit): T =
